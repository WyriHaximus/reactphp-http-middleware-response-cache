<?php declare(strict_types=1);

namespace WyriHaximus\React\Http\Middleware;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

interface CacheConfigurationInterface
{
    /**
     * Determine if the passed request can be cached or not. Return true for cacheable
     * and false for not cacheable.
     *
     * @param ServerRequestInterface $request
     * @return bool
     */
    public function requestIsCacheable(ServerRequestInterface $request): bool;

    /**
     * Determine if the passed request response combination can be cached or not. Return
     * true for cacheable and false for not cacheable.
     *
     * @param ServerRequestInterface $request
     * @param ResponseInterface $response
     * @return bool
     */
    public function responseIsCacheable(ServerRequestInterface $request, ResponseInterface $response): bool;

    /**
     * Create the key to store the request under in the cache.
     *
     * @param ServerRequestInterface $request
     * @return string
     */
    public function cacheKey(ServerRequestInterface $request): string;

    /**
     * Encode the response to be stored in the cache. Must return an array in a
     * format `cacheDecode` can decode into a response.
     *
     * In case your cache can't store arrays take a look at wyrihaximus/react-cache-json
     * (https://github.com/WyriHaximus/reactphp-cache-json) which will encode/decode
     * arrays to and from JSON.
     *
     * @param ResponseInterface $response
     * @return array
     */
    public function cacheEncode(ResponseInterface $response): array;

    /**
     * Turn an array generated by `cacheEncode` into a response.
     *
     * @param array $response
     * @return ResponseInterface
     */
    public function cacheDecode(array $response): ResponseInterface;
}
