<?php declare(strict_types=1);

namespace WyriHaximus\React\Http\Middleware;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

interface CacheConfigurationInterface
{
    /**
     * Determine if the passed request can be cached or not. Return true for cacheable
     * and false for not cacheable.
     *
     * @param  ServerRequestInterface $request
     * @return bool
     */
    public function requestIsCacheable(ServerRequestInterface $request): bool;

    /**
     * Determine if the passed request response combination can be cached or not. Return
     * true for cacheable and false for not cacheable.
     *
     * @param  ServerRequestInterface $request
     * @param  ResponseInterface      $response
     * @return bool
     */
    public function responseIsCacheable(ServerRequestInterface $request, ResponseInterface $response): bool;

    /**
     * Create the key to store the request under in the cache.
     *
     * @param  ServerRequestInterface $request
     * @return string
     */
    public function cacheKey(ServerRequestInterface $request): string;

    /**
     * @param ServerRequestInterface $request
     * @param ResponseInterface $response
     * @return int|null
     */
    public function cacheTtl(ServerRequestInterface $request, ResponseInterface $response): ?int;

    /**
     * Encode the response to be stored in the cache. Must return a string in a
     * format `cacheDecode` can decode into a response.
     *
     * @param  ResponseInterface $response
     * @return string
     */
    public function cacheEncode(ResponseInterface $response): string;

    /**
     * Turn a string generated by `cacheEncode` into a response.
     *
     * @param  string            $response
     * @return ResponseInterface
     */
    public function cacheDecode(string $response): ResponseInterface;
}
